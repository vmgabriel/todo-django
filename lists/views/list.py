"""Http Views"""

# Libraries
from django.shortcuts import redirect
from django.urls import reverse_lazy
from django.db.models import Count
from django.views import generic

# Models
from lists.models.list import List
from lists.models.item import Item

#Forms
from lists.forms import ListForm, ItemForm

class CreateListView(generic.edit.FormView):
    """List Creation"""
    template_name = 'lists/create.html'
    form_class = ListForm
    success_url = 'lists:lists'

    def get_context_data(self, **kwargs):
        """Get Context Data"""
        context = super(CreateListView, self).get_context_data(**kwargs)
        context['mode'] = 'Save'
        return context

    def form_valid(self, form):
        self.object = form.save(
            commit=False,
            **{'user': self.request.user}
        )
        self.object.save()
        return redirect(self.get_success_url())

class DetailListView(generic.detail.DetailView):
    """List Detail"""
    model = List
    template_name = 'lists/detail.html'

    def get_context_data(self, **kwargs):
        """Context generated by list detail"""
        context = super().get_context_data(**kwargs)
        context['items'] = Item.objects.filter(item_list=context['list'].id)
        return context

class EditListView(generic.edit.UpdateView):
    """List Update"""
    model = List
    fields = ['title']
    template_name = 'lists/create.html'
    success_url = 'lists:lists'
    def get_context_data(self, **kwargs):
        """Get Context Data"""
        context = super(EditListView, self).get_context_data(**kwargs)
        context['mode'] = 'Update'
        return context

    def form_valid(self, form):
        """Get Form Valid"""
        self.object = form.save(
            commit=False
        )
        self.object.save()
        return redirect(
            self.get_success_url()
        )

class DeleteListView(generic.edit.DeleteView):
    """List Delete"""
    model = List
    success_url = reverse_lazy('lists:lists')
    template_name = 'lists/confirm_delete.html'

class ListsListView(generic.list.ListView):
    """Lists List View"""
    model = List
    template_name = 'lists/index.html'

    def get_queryset(self):
        """Get the queryset"""
        return List.objects.annotate(len_items=Count('item'))